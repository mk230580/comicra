version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:17-alpine
    container_name: comicra-postgres
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-comicra}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./supabase/migrations:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - comicra-network

  # Supabase Studio (Optional - for database management)
  supabase-studio:
    image: supabase/studio:latest
    container_name: comicra-studio
    environment:
      SUPABASE_URL: http://kong:8000
      STUDIO_PG_META_URL: http://postgres:5432
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
    ports:
      - "54323:3000"
    depends_on:
      - postgres
    networks:
      - comicra-network
    profiles:
      - dev

  # Backend API Server
  backend:
    build:
      context: .
      dockerfile: Dockerfile.backend
    container_name: comicra-backend
    environment:
      NODE_ENV: production
      PORT: 4000
      GEMINI_API_KEY: ${GEMINI_API_KEY}
      CLIENT_ORIGIN: ${CLIENT_ORIGIN:-http://localhost}
      SUPABASE_URL: ${SUPABASE_URL:-http://postgres:5432}
      SUPABASE_SERVICE_ROLE_KEY: ${SUPABASE_SERVICE_ROLE_KEY}
    ports:
      - "4000:4000"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - comicra-network
    restart: unless-stopped

  # Admin Backend Server
  admin-backend:
    build:
      context: .
      dockerfile: Dockerfile.admin
    container_name: comicra-admin-backend
    environment:
      NODE_ENV: production
      PORT: 5000
      JWT_SECRET: ${JWT_SECRET}
      SUPABASE_URL: ${SUPABASE_URL:-http://postgres:5432}
      SUPABASE_SERVICE_ROLE_KEY: ${SUPABASE_SERVICE_ROLE_KEY}
      ADMIN_EMAIL: ${ADMIN_EMAIL}
      ADMIN_PASSWORD: ${ADMIN_PASSWORD}
    ports:
      - "5000:5000"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - comicra-network
    restart: unless-stopped

  # Frontend (React + Vite)
  frontend:
    build:
      context: .
      dockerfile: Dockerfile.frontend
    container_name: comicra-frontend
    ports:
      - "80:80"
    depends_on:
      - backend
      - admin-backend
    networks:
      - comicra-network
    restart: unless-stopped

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: comicra-nginx
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    ports:
      - "443:443"
      - "8080:8080"
    depends_on:
      - frontend
      - backend
      - admin-backend
    networks:
      - comicra-network
    restart: unless-stopped
    profiles:
      - production

  # Cloudflare Tunnel
  cloudflared:
    image: cloudflare/cloudflared:latest
    container_name: comicra-cloudflared
    command: tunnel --no-autoupdate run --token ${CLOUDFLARE_TUNNEL_TOKEN}
    environment:
      TUNNEL_TOKEN: ${CLOUDFLARE_TUNNEL_TOKEN}
    depends_on:
      - nginx
    networks:
      - comicra-network
    restart: unless-stopped
    profiles:
      - cloudflare

  # Redis Cache (Optional - for session management and caching)
  redis:
    image: redis:7-alpine
    container_name: comicra-redis
    command: redis-server --requirepass ${REDIS_PASSWORD:-redis123}
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - comicra-network
    restart: unless-stopped
    profiles:
      - production

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  comicra-network:
    driver: bridge
